Day-13

Q1 Ceil the floor

Code:
pair<int, int> getFloorAndCeil(vector<int> &a, int n, int x) {
	// Write your code here.
	int left=0;
	int right=n-1;
	int flr;
	int cel;
	pair <int,int> ans={-1,-1};
	while(left<=right){
		int mid=(left+right)/2;
		if(a[mid]==x){
			flr=a[mid];
			cel=a[mid];
			ans.first=flr;
			ans.second=cel;
			return ans;
		}
		else if(a[mid]<x) left=mid+1;
		else right=mid-1;
	}
	left=0;
	right=n-1;
	while(left<=right){
		if(a[0]>x) break;
		else{
			int mid=(left+right)/2;
			if(a[mid]<x){
				left=mid+1;
			}
			else{
				right=mid-1;
			}
			if(a[mid]<x){
				ans.first=a[mid];
			}
		}
	}
	left=0;
	right=n-1;
	while(left<=right){
		if(a[n-1]<x) break;
		else{
			int mid=(left+right)/2;
			if(a[mid]<x){
				left=mid+1;
			}
			else{
				right=mid-1;
			}
			if(a[mid]>x){
				ans.second=a[mid];
			}
		}
	}
	return ans;
}

T.C.- O(NlogN)
S.C.- O(1)

Q2 Find minimum in rotated sorted array

Code:
class Solution {
public:
    int findMin(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        return nums[0];
    }
};

T.C.- O(N)
S.C.- O(1)

Q3 Search in rotated sorted array

Code:
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int ans=-1;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==target){
                ans=i;
                break;
            }
        }
        return ans;      
    }
};

T.C.- O(N)
S.C.- O(1)
